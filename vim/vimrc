if &compatible
  set nocompatible
endif

execute 'set rtp+=' . expand('<sfile>:p:h') . '/bundle'
execute 'set rtp+=' . expand($LAMBDA_TASK_ROOT . "/vim/bundle")

function! LambdaHandler()
  let V = vital#lambda_vim_layer#new()
  let HTTP = V.import('Web.HTTP')
  let JSON = V.import('Web.JSON')
  let handlerInfo = split($_HANDLER, '\.')
  let handlerFile = $LAMBDA_TASK_ROOT . "/" . handlerInfo[0] . ".vim"
  let handlerMethod = handlerInfo[1]
  if filereadable(expand(handlerFile))
    execute 'source ' . fnameescape(handlerFile)
  endif
  while 1
    let nextEvent = HTTP.get("http://".$AWS_LAMBDA_RUNTIME_API."/2018-06-01/runtime/invocation/next")
    let eventData = JSON.decode(nextEvent.content)
    let eventHeader = HTTP.parseHeader(nextEvent.header)
    let eventContext = {
          \'memoryLimitInMb' : $AWS_LAMBDA_FUNCTION_MEMORY_SIZE,
          \'functionName' : $AWS_LAMBDA_FUNCTION_NAME,
          \'functionVersion' : $AWS_LAMBDA_FUNCTION_VERSION,
          \'invokedFunctionArm' : eventHeader['Lambda-Runtime-Invoked-Function-Arn'],
          \'xrayTraceId' : eventHeader['Lambda-Runtime-Trace-Id'],
          \'awsRequestId' : eventHeader['Lambda-Runtime-Aws-Request-Id'],
          \'logStreamName' : $AWS_LAMBDA_LOG_STREAM_NAME,
          \'logGroupName' : $AWS_LAMBDA_LOG_GROUP_NAME,
          \'clientContext' : JSON.decode(get(eventHeader, 'Lambda-Runtime-Client-Context', '{}')),
          \'identity' : JSON.decode(get(eventHeader, 'Lambda-Runtime-Cognito-Identity', '{}')),
          \}
    let requestId = eventHeader['Lambda-Runtime-Aws-Request-Id']
    let result = function(handlerMethod)(eventData, eventContext)
    call HTTP.post("http://".$AWS_LAMBDA_RUNTIME_API."/2018-06-01/runtime/invocation/".requestId."/response", result)
  endwhile
endfunction

autocmd VimEnter * call LambdaHandler()
